openapi: 3.0.1
info:
  title: CodersCamp Hackathon REST API
  description: REST API for online integration
  version: 0.1.0
servers:
  - url: /rest-api
    description: REST API v1
tags:
  - name: Tournament Registrations
    description: Open/Closing registrations for tournament
  - name: Players profiles
    description: Save and get players profiles
  - name: Group Quizzes
    description: Quizzes for groups
paths:
  /tournament-registrations:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      responses:
        200:
          description: All existing tournament registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsListDto'
    post:
      tags:
        - Tournament Registrations
      description: Open new tournament registrations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTournamentRegistrationsRequestBody'
      responses:
        201:
          description: Tournament registrations successfully opened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTournamentRegistrationsResponseBody'
  /tournament-registrations/{tournamentId}:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament Registrations with for requested tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsDto'
  /tournament-registrations/{tournamentId}/close:
    post:
      tags:
        - Tournament Registrations
      description: Close tournament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament registrations was successfully closed
  /tournament-registrations/{tournamentId}/players:
    post:
      tags:
        - Tournament Registrations
      description: Register player for participation in the tournament
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterPlayerForTournamentRequestBody'
      responses:
        200:
          description: Player successfully registered for the tournament
  /players-profiles:
    post:
      tags:
        - Players profiles
      description: Create new player profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPlayerProfileRequestBody'
      responses:
        200:
          description: Player profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlayerProfileResponseBody'
    get:
      tags:
        - Players profiles
      description: Fetch list of all players profiles
      responses:
        200:
          description: All existing players profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilesListDto'
  /players-profiles/{playerdId}:
    get:
      tags:
        - Players profiles
      description: Get player profile under given Player ID
      parameters:
        - name: playerdId
          in: path
          description: Player ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Player profile for requested player ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfileDto'
  /quizzes:
    get:
      tags:
        - Group Quizzes
      description: Get current quiz for group
      parameters:
        - name: groupId
          in: query
          description: Group Id
          required: true
          schema:
            type: string
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Current quiz for group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentGroupQuizDto'
  /quizzes/{quizId}/solutions:
    post:
      tags:
        - Group Quizzes
      description: Post quiz solution
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPlayerProfileRequestBody'
      responses:
        200:
          description: Player profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlayerProfileResponseBody'
components:
  schemas:
    TournamentRegistrationsListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentRegistrationsDto'
      uniqueItems: true
    TournamentRegistrationsDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        status:
          description: status of the tournament registrations
          type: string
          enum:
            - OPENED
            - CLOSED
          example: OPENED
        registeredPlayersIds:
          description: ids of players which registered for the tournament
          type: array
          items:
            type: string
          uniqueItems: true
    PostRegisterPlayerForTournamentRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - playerId
    PostTournamentRegistrationsResponseBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations where opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostTournamentRegistrationsRequestBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations should be opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostPlayerProfileRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PostPlayerProfileResponseBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PlayerProfileDto:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
        phoneNumber:
          type: string
          example: 123456789
        emailAddress:
          type: string
          example: email@address.com
    PlayerProfilesListDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlayerProfileDto'
          uniqueItems: true
    CurrentGroupQuizDto:
      type: object
      properties:
        quizId:
          description: Identifier of the quiz
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        groupId:
          description: Identifier of the group which is quiz for
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        startedAt:
          description: When quiz was started
          type: string
          example: date
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswerDto'
          uniqueItems: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/QuizUserDto'
          uniqueItems: true
    QuizUserDto:
      type: object
      properties:
        userId:
          description: Identifier of the user
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
    QuizAnswerDto:
      type: object
      properties:
        answerId:
          description: Identifier of the user
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        text:
          description: Body of the answer
          type: string
          example: Moja odpowiedz na zadane pytanie
    QuizSolutionAnswerDto:
      type: object
      properties:
        answerId:
          description: Identifier of the user
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        userId:
          description: Identifier of the user
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
    PostQuizSolutionRequestBody:
      type: object
      properties:
        solutionAuthorId:
          description: Identifier of the user
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        solution:
          type: array
          items:
            $ref: '#/components/schemas/QuizSolutionAnswerDto'
          uniqueItems: true
