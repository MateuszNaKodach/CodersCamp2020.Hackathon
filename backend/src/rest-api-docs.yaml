openapi: 3.0.1
info:
  title: CodersCamp Hackathon REST API
  description: REST API for online integration
  version: 0.1.0
servers:
  - url: /rest-api
    description: REST API v1
tags:
  - name: Tournament Registrations
    description: Open/Closing registrations for tournament
  - name: Players profiles
    description: Save and get players profiles
paths:
  /tournament-registrations:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      responses:
        200:
          description: All existing tournament registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsListDto'
    post:
      tags:
        - Tournament Registrations
      description: Open new tournament registrations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTournamentRegistrationsRequestBody'
      responses:
        201:
          description: Tournament registrations successfully opened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTournamentRegistrationsResponseBody'
  /tournament-registrations/{tournamentId}:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament Registrations with for requested tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsDto'
  /tournament-registrations/{tournamentId}/close:
    post:
      tags:
        - Tournament Registrations
      description: Close tournament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament registrations was successfully closed
  /tournament-registrations/{tournamentId}/players:
    post:
      tags:
        - Tournament Registrations
      description: Register player for participation in the tournament
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterPlayerForTournamentRequestBody'
      responses:
        200:
          description: Player successfully registered for the tournament
  /players-profiles:
    post:
      tags:
        - Players profiles
      description: Create new player profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPlayerProfileRequestBody'
      responses:
        200:
          description: Player profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlayerProfileResponseBody'
    get:
      tags:
        - Players profiles
      description: Fetch list of all players profiles
      responses:
        200:
          description: All existing players profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilesListDto'
  /players-profiles/{playerdId}:
    get:
      tags:
        - Players profiles
      description: Get player profile under given Player ID
      parameters:
        - name: playerdId
          in: path
          description: Player ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Player profile for requested player ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfileDto'
components:
  schemas:
    TournamentTeamDto:
      type: object
      properties:
        items:
          description: List of tournament teams
          type: array
          items:
            type: object
            properties:
              teamId:
                description: Identifier of the team
                type: string
                format: uuid
                example: 094469cf-6fcc-4947-a5c0-be1e94f54855
              firstTeamPlayer:
                description: First team player
                type: string
                format: uuid
                example: b8c4c924-a9a5-4296-a319-ebdfbadec6ba
              secondTeamPlayer:
                description: Second team player
                type: string
                format: uuid
                example: 3c09dc91-d82c-4226-9801-4430d3aa48ce
    DoubleTournamentDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        tournamentTeams:
          description: tournament teams
          type: array
          items:
            $ref: '#/components/schemas/TournamentTeamDto'
          uniqueItems: true
        status:
          description: status of the tournament
          type: string
          enum:
            - NOT_STARTED
            - STARTED
            - ENDED
          example: STARTED
    DoubleTournamentListDto:
      type: array
      items:
        $ref: '#/components/schemas/DoubleTournamentDto'
      uniqueItems: true
    QueuedMatchDto:
      type: object
      properties:
        matchNumber:
          description: Match number
          type: number
          example: 1
        team1Id:
          description: First team id
          type: string
          format: uuid
          example: b8c4c924-a9a5-4296-a319-ebdfbadec6ba
        team2Id:
          description: Second team id
          type: string
          format: uuid
          example: b8c4c924-a9a5-4296-a319-ebdfbadec6ba
        started:
          description: Match status
          type: string
          enum:
            - ENQUEUED
            - STARTED
            - ENDED
        tableNumber:
          description: Table number
          type: number
          example: 1
    MatchesQueueDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        queue:
          description: Matches queue
          type: array
          items:
            $ref: '#/components/schemas/QueuedMatchDto'
          uniqueItems: true
    TournamentRegistrationsListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentRegistrationsDto'
      uniqueItems: true
    TournamentRegistrationsDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        status:
          description: status of the tournament registrations
          type: string
          enum:
            - OPENED
            - CLOSED
          example: OPENED
        registeredPlayersIds:
          description: ids of players which registered for the tournament
          type: array
          items:
            type: string
          uniqueItems: true
    PostRegisterPlayerForTournamentRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - playerId
    PostTournamentRegistrationsResponseBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations where opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostTournamentRegistrationsRequestBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations should be opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostPlayerProfileRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PostPlayerProfileResponseBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PostStartMatchRequestBody:
      type: object
      properties:
        matchId:
          description: Identifier of the match that is supposed to start ("tournamentId_matchNumber")
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5_1
        firstMatchSideId:
          description: Identifier of the match first team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
        secondMatchSideId:
          description: Identifier of the match second team
          type: string
          format: uuid
          example: 8321fc2c-bbd7-427c-9439-02f76583aef7
      required:
        - tournamentId
        - firstMatchSideId
        - secondMatchSideId
    PostEndMatchRequestBody:
      type: object
      properties:
        winnerId:
          description: Identifier of the winner team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
    MatchDto:
      type: object
      properties:
        matchId:
          description: Identifier of the match ("tournamentId_matchNumber")
          type: string
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5_1
        firstMatchSideId:
          description: Identifier of the match first team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
        secondMatchSideId:
          description: Identifier of the match second team
          type: string
          format: uuid
          example: 8321fc2c-bbd7-427c-9439-02f76583aef7
        winnerId:
          description: Identifier of the winner team, returned only when match was ended
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
    PostAssignTournamentTablesRequestBody:
      type: object
      properties:
        tables:
          description: List of tournament tables
          type: array
          items:
            type: object
            properties:
              tableNumber:
                description: Number of the table (1-200)
                type: integer
                minimum: 1
                maximum: 200
                example: 1
              tableName:
                description: Name of the table
                type: string
              isFree:
                description: Is table available for next match
                type: boolean
          uniqueItems: true
    TournamentTablesDto:
      type: object
      properties:
        tables:
          description: List of tournament tables
          type: array
          items:
            type: object
            properties:
              tableNumber:
                description: Number of the table (1-200)
                type: integer
                example: 1
              tableName:
                description: Name of the table
                type: string
              isFree:
                description: Is table available for next match
                type: boolean
          uniqueItems: true
    PlayerProfileDto:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
        phoneNumber:
          type: string
          example: 123456789
        emailAddress:
          type: string
          example: email@address.com
    PlayerProfilesListDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlayerProfileDto'
          uniqueItems: true
    PostTournamentDetailsRequestBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which details should be added
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        tournamentName:
          description: Name of the tournament
          type: string
          example: WrocLove Tournament
      required:
        - tournamentId
        - tournamentName
    TournamentDetailsListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentDetailsDto'
      uniqueItems: true
    TournamentDetailsDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        tournamentName:
          description: Name of the tournament
          type: string
          example: WrocLove Tournament
    TournamentTreeDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        tournamentTeams:
          description: tournament teams
          type: array
          items:
            properties:
              tournamentTeamId:
                type: string
          uniqueItems: true
        tournamentTreeArray:
          description: Tournament tree as an array
          type: array
          items:
            properties:
              fightingTeamsGroupId:
                type: string
              firstTeam:
                type: string
              secondTeam:
                type: string
              fightingTeamsGroupLevel:
                type: number
              nextMatchId:
                type: string
              matchNumberInSequence:
                type: number
              isMatchFinished:
                type: boolean
    TournamentPlaceListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentPlaceDto'
      uniqueItems: true
    TournamentPlaceDto:
      type: object
      properties:
        teamId:
          description: Identifier of the team
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        placeNumber:
          description: Place number
          type: number
          example: 1

    PostAnswerGroupQuestionRequestBody:
      type: object
      properties:
        questionId:
          description: Identifier of the question for which answer is given
          type: string
          format: uuid
          example: 040ac7f2-96cd-472e-a6a8-b6094d3e4e94
        groupId:
          description: Identifier of the group for which answer is given
          type: string
          format: uuid
          example: 653e8ff0-1de8-43f1-b5e3-f83a635cbf0e
        answerAuthorId:
          description: Identifier of the answer author for which answer is given
          type: string
          format: uuid
          example: 44b2b9d9-1740-42f9-89e5-c8f652ec4e11
        text:
          description: Text of the author for which answer is given
          type: string
          example: "Where were you last vacation"
      required:
        - questionId
        - groupId
        - answerAuthorId
        - text
